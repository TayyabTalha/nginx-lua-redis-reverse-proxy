worker_processes 10;
error_log /var/log/nginx/error.log alert;
access_log /var/log/nginx/access.log;
env DEFAULT_UPSTREAM;
env REDIS_HOST;
env REDIS_PORT;
env RESOLVER;
env DEBUG;


events {
worker_connections 1024;
}

http {
    server {
	listen 80;
	location /login {
		resolver 8.8.4.4;
		set $upstream "";
		rewrite_by_lua '
		   
		   -- Setting Defaults
		   local config = _G.config

		   if config == nil then
		       config = {}
		       
		       config["default_upstream"] = os.getenv("DEFAULT_UPSTREAM")
		       config["redis_host"] = os.getenv("REDIS_HOST")
		       config["redis_port"] = os.getenv("REDIS_PORT")
		       config["resolver"] = os.getenv("RESOLVER")
		       config["debug"] = os.getenv("DEBUG")

		       if not config["redis_host"] then
		           config["redis_host"] = "127.0.0.1"
		       end

		       if not redis_port then
		            config["redis_port"] = 6379
		       end


		       ngx.log(ngx.ALERT, "Setting default_upstream: ", config["default_upstream"])
		       ngx.log(ngx.ALERT, "Setting redis_host: ", config["redis_host"])
		       ngx.log(ngx.ALERT, "Setting redis_port: ", config["redis_port"])
		       ngx.log(ngx.ALERT, "Setting resolver: ", config["resolver"])
		       ngx.log(ngx.ALERT, "Setting debug: ", config["debug"])

		       _G.config = config
		   end


		   if config["default_upstream"] ~= nil then
		       ngx.var.upstream = config["default_upstream"]
		   end

		   if config["resolver"] ~= nill then
		       ngx.var.resolver = config["resolver"]
		   end


		   -- Setting Up Redis
		   local redis  = require "resty.redis"
		   local red = redis:new()
		   -- red:set_timeouts(1000, 1000, 1000)
		   local ok, err = red:connect(config["redis_host"], config["redis_port"])
		   if not ok then
		       ngx.say("failed to connect: ", err)
		       return ngx.exit(500) 
		   end
		   
		   local method = ngx.var.request_method
		   if method == "POST" then
		       ngx.req.read_body()
		       local args, err = ngx.req.get_post_args()
		       if err == "truncated" then

		           -- one can choose to ignore or reject the current request here
			   -- If default upstream server is then dispatch request default upstream
			   -- else responde with 500 internal error
			   if config["default_upstream"] == nil then
			      ngx.say("No Upstream")
			      return ngx.exit(500)
			   end
			   return
		       end


                       if not args then
		           ngx.say("failed to get post args: ", err)
			   return
		       end

		       if config["debug"] ~= nil then
		           ngx.log(ngx.ALERT, args["username"])
		       end
		       
		       if args["username"] == nil then
		           if config["default_upstream"] == nil then
			       ngx.say("No Upstream")
			       return ngx.exit(500)
			   end
		           return
		       end
		      
		       local key = "api.dispatcher."..args["username"]
		       local host, err = red:get(key)
		       if not host then
		           if config["debug"] ~= nil then
		               ngx.log(ngx.ALERT, "failed to get redis key: ", err)
			   end
			   
			   if config["default_upstream"] == nil then
			       ngx.say("No Upstream for: ", key)
			       return ngx.exit(500)
			   end
			   return
		       end

		       if host == ngx.null then
		            if config["debug"] ~= nil then
		                ngx.log(ngx.ALERT, "no host found for key ", key)
			    end
			    if config["default_upstream"] == nil then
			        ngx.say("No Upstream")
			        return ngx.exit(400)
			    end
			    return
		       end
		       ngx.var.upstream = host

		   end
		   
		';
		proxy_pass $upstream;
	}
    }
}
